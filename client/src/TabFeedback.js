import React, { useState } from 'react';
import styled from 'styled-components';
import axios from 'axios';
import { toast } from 'react-toastify';

const Wrapper = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
`;

const Container = styled.div`
  padding: 5px;
  width: 100%;
  max-width: 800px;
  position: relative;
  z-index: 2;
  border-radius: 12px;
  box-sizing: border-box;
`;

const Title = styled.h2`
  text-align: center;
  width: 100%;
  padding: 12px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 8px;
  margin-top: 0;
  margin-bottom: 20px;
`;

const Form = styled.form`
  display: flex;
  flex-direction: column;
  gap: 16px;
`;

const Row = styled.div`
  display: flex;
  gap: 10px;
`;

const QuestionGroup = styled.div`
  display: flex;
  flex-direction: column;
  flex: 1;
`;

const Label = styled.label`
  font-weight: 600;
  margin-bottom: 4px;
`;

const InputBase = ({ error, ...rest }) => <input {...rest} />;

const Input = styled(InputBase)`
  padding: 8px;
  font-size: 14px;
  border: 1px solid ${p => p.error ? '#e74c3c' : '#ccc'};
  border-radius: 4px;
`;

const TextAreaBase = ({ error, ...rest }) => <textarea {...rest} />;

const TextArea = styled(TextAreaBase)`
  padding: 8px;
  font-size: 14px;
  border: 1px solid ${p => p.error ? '#e74c3c' : '#ccc'};
  border-radius: 4px;
  resize: vertical;
`;

const ErrorText = styled.p`
  color: #e74c3c;
  font-size: 13px;
  margin-top: 4px;
`;

const Button = styled.button`
  width: 100%;
  padding: 12px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  margin-top: 10px;
  transition: background .2s;
  &:hover { background: #0056b3; }
`;

const questions = [
  '1. Jak BK og√≥lnie czuje siƒô z klientem?',
  '2. Jak zosta≈Ça przyjƒôta przez pacjenta?',
  '3. Jak wyglƒÖda wsp√≥≈Çpraca z cz≈Çonkami rodziny?',
  '4. Czy istniejƒÖ trudno≈õci w opiece nad pacjentem/pacjentkƒÖ? (czy wystƒôpujƒÖ noce, transfer, inkontynencja, forma poruszania siƒô)',
  '5. Czy dy≈ºuruje s≈Çu≈ºba pielƒôgniarska (Pflegedienst)?',
  '6. Czy BK ma przerwy i czas wolny?',
  '7. Czy wszystko jest dobrze zorganizowane (bud≈ºet domowy, osoba kontaktowa dostƒôpna, produkty pielƒôgnacyjne na miejscu, wsparcie przy zakupach hurtowych, czy przestrzegane sƒÖ warunki pracy)?',
  '8. Czy BK chcia≈Çby wr√≥ciƒá? Je≈õli tak, w jakim rytmie? Je≈õli nie, dlaczego nie? Jak wyglƒÖda rytm dnia.',
  '9. W jaki spos√≥b aktywizujesz seniora? Jakie sƒÖ zainteresowania seniora?',
  '10. Czy jest co≈õ, co klient lub firma Berlin Opieka mo≈ºe zoptymalizowaƒá?'
];

const TabFeedback = ({ onSuccess, onClose }) => {
  const initialState = {
    caregiverFirstName: '',
    caregiverLastName: '',
    caregiverPhone: '',
    patientFirstName: '',
    patientLastName: '',
    q1: '', q2: '', q3: '', q4: '', q5: '', q6: '', q7: '', q8: '', q9: '', q10: '', notes: ''
  };
  const [formData, setFormData] = useState(initialState);
  const [errors, setErrors] = useState({});
  const [submitting, setSubmitting] = useState(false);
  const [step, setStep] = useState(1);
  const [sendingSms, setSendingSms] = useState(false);
  const [mode, setMode] = useState('form');

  const handleChange = e => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    setErrors(prev => ({ ...prev, [name]: '' }));
  };

  const handleNext = e => {
    e.preventDefault();
    setStep(2); 
  };

  const handleSubmit = async e => {
    e.preventDefault();
    setSubmitting(true);
    try {
      const token = localStorage.getItem('token');
      const res = await axios.post(`${process.env.REACT_APP_API_URL}/api/tabResponses`, formData, {
        headers: { Authorization: `Bearer ${token}` }
      });
  
      // üîî Komunikat sukcesu
      toast.success('Feedback dodany');
  
      // üîÅ Od≈õwie≈º widok listy (jak fetchCases)
      window.dispatchEvent(new Event('feedbackBack'));
  
      // Reset + zamkniƒôcie
      onSuccess?.(res.data); // mo≈ºesz te≈º usunƒÖƒá to, je≈õli ju≈º niepotrzebne
      onClose?.();
      setFormData(initialState);
      setStep(1);
      setErrors({});
    } catch (err) {
      console.error(err);
      toast.error('B≈ÇƒÖd podczas zapisu feedbacku');
    } finally {
      setSubmitting(false);
    }

    setTimeout(() => {
      window.dispatchEvent(new Event('goToFeedbackList'));
    }, 100);
  };
  const handleSendSms = async () => {
    const phone = formData.caregiverPhone;
    if (!phone) {
      toast.error('Podaj numer telefonu');
      return;
    }
  
    try {
      setSendingSms(true);
      const token = localStorage.getItem('token');
  
      // üîπ Najpierw zapisz wpis (ale tylko dane podstawowe, bez pyta≈Ñ)
      const res = await axios.post(`${process.env.REACT_APP_API_URL}/api/tabResponses`, formData, {
        headers: { Authorization: `Bearer ${token}` }
      });
  
      // üîπ Wy≈õlij SMS tylko z linkiem, u≈ºywajƒÖc wygenerowanego ID
      await axios.post(`${process.env.REACT_APP_API_URL}/api/send-sms-feedback-link`, {
        id: res.data.id
      }, {
        headers: { Authorization: `Bearer ${token}` }
      });
  
      toast.success('SMS zosta≈Ç wys≈Çany!');
      onClose?.();
      setFormData(initialState);
      setStep(1);
      setErrors({});
    } catch (err) {
      console.error('B≈ÇƒÖd SMS:', err);
      toast.error('Nie uda≈Ço siƒô wys≈Çaƒá SMS-a');
    } finally {
      setSendingSms(false);
    }
  };

  
  return (
    <Wrapper>
      <Container>
        <Title>Formularz odpowiedzi</Title>
        {step === 1 ? (
          <Form onSubmit={handleNext}>
            <Row>
              <QuestionGroup>
                <Label>Imiƒô opiekunki</Label>
                <Input
  name="caregiverFirstName"
  value={formData.caregiverFirstName}
  onChange={handleChange}
/>
                {errors.caregiverFirstName && <ErrorText>{errors.caregiverFirstName}</ErrorText>}
              </QuestionGroup>
              <QuestionGroup>
                <Label>Nazwisko opiekunki</Label>
                <Input
                  name="caregiverLastName"
                  value={formData.caregiverLastName}
                  onChange={handleChange}
                  error={!!errors.caregiverLastName}
                />
                {errors.caregiverLastName && <ErrorText>{errors.caregiverLastName}</ErrorText>}
              </QuestionGroup>
            </Row>
            <QuestionGroup>
              <Label>Numer telefonu opiekunki</Label>
              <Input
                name="caregiverPhone"
                type="tel"
                value={formData.caregiverPhone}
                onChange={handleChange}
                error={!!errors.caregiverPhone}
              />
              {errors.caregiverPhone && <ErrorText>{errors.caregiverPhone}</ErrorText>}
            </QuestionGroup>
            <Row>
              <QuestionGroup>
                <Label>Imiƒô pacjenta</Label>
                <Input
                  name="patientFirstName"
                  value={formData.patientFirstName}
                  onChange={handleChange}
                  error={!!errors.patientFirstName}
                />
                {errors.patientFirstName && <ErrorText>{errors.patientFirstName}</ErrorText>}
              </QuestionGroup>
              <QuestionGroup>
                <Label>Nazwisko pacjenta</Label>
                <Input
                  name="patientLastName"
                  value={formData.patientLastName}
                  onChange={handleChange}
                  error={!!errors.patientLastName}
                />
                {errors.patientLastName && <ErrorText>{errors.patientLastName}</ErrorText>}
              </QuestionGroup>
            </Row>
            <QuestionGroup>
  <Label>Wybierz spos√≥b wype≈Çnienia feedbacku:</Label>
  <div style={{ display: 'flex', gap: '12px' }}>
    <label>
      <input type="radio" value="form" checked={mode === 'form'} onChange={() => setMode('form')} />
      Wype≈Çnij teraz
    </label>
    <label>
      <input type="radio" value="sms" checked={mode === 'sms'} onChange={() => setMode('sms')} />
      Wy≈õlij SMS z linkiem
    </label>
  </div>
</QuestionGroup>
{mode === 'form' ? (
  <Button type="submit">Dalej</Button>
) : (
  <Button type="button" onClick={handleSendSms} disabled={sendingSms}>
    {sendingSms ? 'Wysy≈Çanie...' : 'Wy≈õlij SMS z linkiem'}
  </Button>
)}
          </Form>
        ) : (
          <Form onSubmit={handleSubmit}>
            {questions.map((text, idx) => {
              const key = `q${idx + 1}`;
              return (
                <QuestionGroup key={key}>
                  <Label>{text}</Label>
                  {key === 'q5' ? (
                    <Input name={key} value={formData[key]} onChange={handleChange} />
                  ) : (
                    <TextArea name={key} value={formData[key]} onChange={handleChange} rows={3} />
                  )}
                </QuestionGroup>
              );
            })}
            <QuestionGroup>
              <Label>Notatka:</Label>
              <TextArea
                name="notes"
                value={formData.notes}
                onChange={handleChange}
                rows={4}
                placeholder="WyglƒÖd okolicy, warunki mieszkalne, inne pozytywy"
              />
            </QuestionGroup>
            <Button type="submit" disabled={submitting}>
              {submitting ? 'Zapisujƒô...' : 'Zapisz odpowiedzi'}
            </Button>
          </Form>
        )}
      </Container>
    </Wrapper>
  );
};

export default TabFeedback;